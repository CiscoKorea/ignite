'''
This file has a function run_ank which acts as a bridge
between the poap and ank tool. It takes 4 arguments:
topo_detail--This is the input topology data generated by poap.
prof_detail--It contains device profiles which in turn are a collection of configs to be applied on the device.
REPO_PATH------This is the location where config files generated by poap are placed.
fab------This is the fabric name containg replica number also.

run_ank takes above 4 parameters as input and passes the 1st 2 arguments to ank.
ank in turn generates the output configuration files and returns the folder name.
At the end, files generated by ank are concatenated with the configuration files
generated by poap.
'''
from autonetkit import json_converter
import autonetkit.log as log
from ignite.settings import REPO_PATH
import os

def run_ank(topo_detail ={}, prof_detail ={}, fab = '', syntax ='nx_os',  fab_id ='',pool_dict =None):
    try:
        #dst_folder is the place where ank places it's output config files
        #print REPO_PATH
        #print fab

        if REPO_PATH is None or topo_detail is None or prof_detail is None:
            log.error("start_ank.py...one or more parameters to run_ank is empty")
            return None
        dst_folder = json_converter.main(topo_detail, prof_detail, fab, syntax, fab_id, pool_dict)
        #print dst_folder
        line_ank = "!!!!!!!!!!!!!!!!!!!!!!!!!!!ANK CONFIG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
        line_poap = "!!!!!!!!!!!!!!!!!!!!!!!!!!!POAP CONFIG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
        if dst_folder is not None:
            import os
            import re
            #fn_ank is the name of the file generated by ank
            #fn_poap is the name of the file generated by poap
            for file_ank in os.listdir(dst_folder):
                #removing ".conf" at the end and adding ".cfg" at end
                file_final = file_ank[:len(file_ank)-4] + 'cfg'

                file_ank = dst_folder + '/' + file_ank
                file_final = REPO_PATH + '/' + file_final
                with open(file_ank,"r") as f_ank:
                    buff_ank = f_ank.read()
                with open(file_final, "w+") as fpc:
                    fpc.write(buff_ank)
            
	    dst_folder = dst_folder[:dst_folder.rfind('/')]
            command = "rm -rf " + dst_folder 
            try: 
            	os.system(command)
            except:
                log.error("start_ank.py...removal of ank generated folder failed")
            return 1

        else:
            log.error("start_ank.py...ank returned destination folder as None")
            return None

    except:
        log.error("start_ank.py...exception recieved in call to json_converter")
        return None

